# -*- coding: utf-8 -*-
"""Forecast S&P 500 With ARIMA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MGYhq-PxjKZUyDKyuIowIU6iUXvOCcwf

##Load The Data
"""

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_absolute_percentage_error, mean_squared_error

#Menentukan tanggal
start_date = "2024-08-23"
end_date = "2025-08-23"
#Mengambil data saham untuk tanggal tertentu
hist = yf.Ticker('^GSPC')
df= hist.history(start=start_date, end=end_date, auto_adjust=True)
#Import CSV
csv_filename = "SP500.csv"
df.to_csv(csv_filename)
#Tampilan Data
print(df.head())

df=df['Close']
df.head(5)

df = df.reset_index()
df['Date'] = pd.to_datetime(df['Date']).dt.date
df.head(5)

"""##Plot The Data"""

plt.figure(figsize=(10,5))
plt.plot(df['Date'], df['Close'],label='Close')

plt.xlabel("Date")
plt.ylabel("Close")
plt.xticks(rotation=45)
plt.legend()
plt.show()

"""##Split Data Into Data Train & Data Test"""

train_size = int(len(df)*0.9)
df_train = df.iloc[:train_size]
df_test = df.iloc[train_size:]
print(len(df_train))
print(len(df_test))

"""#Check Stationary with ADF & ACF PACF"""

result = adfuller(df_train['Close'])
print("ADF Statistic:", result[0])
print("p-value:", result[1])

plot_acf(df_train['Close'])
plot_pacf(df_train['Close'])
plt.show()

"""##Transform to stationary: Differencing"""

df_train_diff = df_train['Close'].diff().dropna()
plt.figure(figsize=(10,5))
plt.plot(df_train_diff)
plt.show()

adf_test = adfuller(df_train_diff)
print(f"p-value stlh differencing: {adf_test[1]}")

acf_diff = plot_acf(df_train_diff)
pacf_diff = plot_pacf(df_train_diff)

"""##ARIMA Model Manual"""

from statsmodels.tsa.arima.model import ARIMA

arima_model_manual = ARIMA(df_train['Close'], order=(3,1,3))
arima_fit_manual = arima_model_manual.fit()
print(arima_fit_manual.summary())

"""##Prediction The Data"""

#Predictions for the next 25 periods
forecast_manual = arima_fit_manual.forecast(steps=25)
future_dates_manual = pd.date_range(df['Date'].iloc[-1] + pd.Timedelta(days=1), periods=25, freq='B')
df_forecast_manual = pd.DataFrame({"Date": future_dates_manual, "Forecast": forecast_manual})
df_forecast_manual.head(25)

import matplotlib.pyplot as plt
residuals = arima_fit_manual.resid[1:]
fig, ax = plt.subplots(1,2, figsize=(15,5))
residuals.plot(title='Residuals', ax=ax[0])
residuals.plot(title='Density', kind='kde', ax=ax[1])
plt.show()

acf_res = plot_acf(residuals)
pacf_res = plot_pacf(residuals)

plt.figure(figsize=(10,5))
plt.plot(df['Date'], df['Close'], label="Actual Close")
plt.plot(df_forecast_manual['Date'], df_forecast_manual['Forecast'], label="Forecast Manual")

plt.xlabel("Date")
plt.ylabel("Close Price")
plt.title("Close Price Forecast")
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""##Arima Model Auto"""

import pmdarima as pm

import pmdarima as pm
auto_arima = pm.auto_arima(df_train['Close'], stepwise=False, seasonal=False)
auto_arima

arima_model_auto = ARIMA(df_train['Close'], order=(0,1,4))
arima_fit_auto = arima_model_auto.fit()
print(arima_fit_auto.summary())

#Predictions for the next 25 periods
forecast_auto = arima_fit_auto.forecast(steps=25)
future_dates_auto = pd.date_range(df['Date'].iloc[-1] + pd.Timedelta(days=1), periods=25, freq='B')
df_forecast_auto = pd.DataFrame({"Date": future_dates_auto, "Forecast": forecast_auto})
df_forecast_auto.head(25)

plt.figure(figsize=(12,6))

# Data aktual
plt.plot(df['Date'], df['Close'], label="Actual Close", color="blue")

# Forecast manual
plt.plot(df_forecast_manual['Date'], df_forecast_manual['Forecast'],
         label="Forecast Manual", color="red")

# Forecast auto
plt.plot(df_forecast_auto['Date'], df_forecast_auto['Forecast'],
         label="Forecast Auto", color="orange")

# Styling
plt.xlabel("Date")
plt.ylabel("Close Price")
plt.title("Close Price Forecast (Manual vs Auto)")
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""##MAPE & RMSE"""

from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, mean_squared_error

#ARIMA(3,1,3)
mape_manual = mean_absolute_percentage_error(df_test['Close'], df_forecast_manual['Forecast'])
rmse_manual = np.sqrt(mean_squared_error(df_test['Close'], df_forecast_manual['Forecast']))

print(f'mape - manual: {mape_manual}')
print(f'rmse - manual: {rmse_manual}')

#ARIMA(0,1,4)
mape_auto = mean_absolute_percentage_error(df_test['Close'], df_forecast_auto['Forecast'])
rmse_auto = np.sqrt(mean_squared_error(df_test['Close'], df_forecast_auto['Forecast']))

print(f'mape - auto: {mape_auto}')
print(f'rmse - auto: {rmse_auto}')